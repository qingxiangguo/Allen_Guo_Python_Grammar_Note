# Qingxiang Guo
# {2022/7/4} {21:49}
def fib_generator():
    print('---1---')  #用来标识，便于检测运行顺序
    num1=1
    num2=1
    while True:   #使代码有循环能力
        print('---2---')
        temp_num = num1
        print('---3---')
        num1,num2=num2,num1+num2
        print('---4---')
        yield temp_num
        print('---5---')

fib=fib_generator()  #生成一个迭代器（生成器）

print(next(fib))

print('************')

print(next(fib))

print('************')

print(next(fib))

print('************')

print(next(fib))

#输出
'''
---1---
---2---
---3---
---4---
1
************
---5---
---2---
---3---
---4---
1
************
---5---
---2---
---3---
---4---
2
************
---5---
---2---
---3---
---4---
3

'''

#一旦有了yield关键字，这个函数就不是一般函数了，而是生成器，具有了存档运行的能力
#比如上述代码，重新运行的时候，第二次调用的时候，不会重头开始
#在next调用的时候，如果是第一次执行，则从def代码块的开始部分执行
#直到遇到yield为止，并且把yield关键字后面的数值返回，当做next()的返回值供打印
#如果不是第一次执行，则从上一次暂停的位置执行（即从上一次yield关键字的下一个语句开始执行）
#直到再一次遇到yield为止，并且把yield关键字后面的数值返回，当做next()的返回值供打印