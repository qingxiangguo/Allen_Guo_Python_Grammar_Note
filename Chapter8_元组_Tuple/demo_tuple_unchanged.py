# Qingxiang Guo
# {2022/5/11} {22:33}
# 为什么要将元组设计成不可变序列
# 因为元组里存储的是列表的引用 不能修改列表的引用 但是可以修改引用的列表里的值
# 就是盒子装东西，不可变盒子不能改，可变盒子可以改盒子里的东西，但还是要拿这个盒子来装
t=(10,[20,30],9)
print(t, type(t))
print(t[0],type(t[0]),id(t[0]))  #元组是有序的，有索引, 10 <class 'int'> 2312234467856
print(t[1],type(t[1]),id(t[1]))  #[20, 30] <class 'list'> 2498449614592
print(t[2],type(t[2]),id(t[2]))  #9 <class 'int'> 1326678016496

#尝试将t[1]整体修改为整数100
#t[1]=100   #元组管自己这一层的逻辑，这一层是不可变的，但是他不管里面一层的内部变动
'''由于[20,30]列表，而列表是可变序列，所以可以向列中添加元素，而列表的内存地址不变'''
t[1].append(100)  #向列表中添加元素
print(t, id(t[1]))  #(10, [20, 30, 100], 9) 2498449614592，可以看到列表的地址在修改前后是不变的

t[1][1:3:1]=[66,88]
print(t, id(t[1]))  #(10, [20, 66, 88], 9)，同样可以做切片操作，把t[1]作为一个列表来看
