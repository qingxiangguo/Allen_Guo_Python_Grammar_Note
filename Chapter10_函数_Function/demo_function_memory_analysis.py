# Qingxiang Guo
# {2022/5/17} {20:54}
#函数参数传递的内存分析，值传递和地址传递
def fun(arg1,arg2):   #arg1,arg2是形参
    print('arg1',arg1)
    print('arg2',arg2)
    arg1=100
    arg2.append(10)
    print('arg1',arg1)
    print('arg2',arg2)

#下面开始运行函数
n1=11    #n1,n2是实参
n2=[22,33,44]
print('运行函数之前','n1',n1,id(n1))
print('运行函数之前','n2',n2,id(n2))
fun(n1,n2)
print('--------运行函数之后，观察n1,n2的值的变化------------')
print('运行函数之后','n1',n1,id(n1))
print('运行函数之后','n2',n2,id(n2))

#运行函数之后 n1 11,运行函数之后 n2 [22, 33, 44, 10]
#为什么n1没有变化，而n2的值变化了呢？
'''
python中存在可更改(mutable)与不可更改(immutable)对象
可更改对象包括列表，字典等；不可更改对象包括字符串、数据类型、元组，不可变类型只是穿值（值传递）
而可变类型，类似C++的引用传递，是真真正正的将对象传递过去（地址传递），在函数内部修改，在外部也会受到影响
所以其实就是列表是可变序列所以在函数的调用过程中改变了，但字符串因为是不可变序列所以不发生改变故而维持原来的值
'''