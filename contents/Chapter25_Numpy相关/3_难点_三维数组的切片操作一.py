# _*_ coding=utf-8 _*_
'''
很多时候，二维数组比较好理解，切片时，逗号前面是行，逗号后面是列；三维数组则不然
其实二维数组这样是比较偷懒的理解方法，逗号前面的数字，比如是0，真正的含义是，当前三维数组的第一个子二维数组
逗号后面的数字，比如是1，真正的含义是，前面取到的，【当前三维数组的第一个子二维数组】的索引为1的子数组
所以对于高维数组来说，切片就是不断降维的过程，对于三维数组X，切片操作X[a,b,c],
就是取内部的第a+1个二维数组，再取内部的第b行，里面的第c列的值
'''

# 要想弄清楚三维数组的切片问题，首先要明白三维数组的维度，定义一个三维数组，将其维度打印输出：
import numpy as np
b = np.array([
    [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]],
    [[13, 14, 15, 16], [17, 18, 19, 20], [21, 22, 23, 24]],
    [[25, 26, 27, 28], [29, 30, 31, 32], [33, 34, 35, 36]],
       ])
print(b.shape)

'''
输出结果：
(3, 3, 4)
第一个数表示该三维数组中二维数组的个数，
第二个和第三个参数表示二维数组的行和列，
即这个三维数组中有3个3行4列的二维数组
'''

# 接下来以实际的输出结果来逐一解释对这三个维度的操作问题：

print("b[0, ::]")
print(b[0, ::], b[0, ::].shape)
print("b[1, ::]")
print(b[1, ::], b[1, ::].shape)
print("b[-1, ::]")
print(b[-1, ::], b[-1, ::].shape)
print("b[0:2, ::]")
print(b[0:2, ::], b[0:2, ::].shape)

'''
输出结果分析：
b[0, ::]
[[ 1  2  3  4]
 [ 5  6  7  8]
 [ 9 10 11 12]] (3, 4)
 第一个维度表示三维数组中二维数组的个数，
 b[0, ::]将三维数组中的第一个二维数组输出
 
b[1, ::]
[[13 14 15 16]
 [17 18 19 20]
 [21 22 23 24]] (3, 4)
b[1, ::]将三维数组中的第二个二维数组输出
b[-1, ::]
[[25 26 27 28]
 [29 30 31 32]
 [33 34 35 36]] (3, 4)
 负数表示从后向前逆向操作，
b[-1, ::]将三维数组中的最后一个二维数组输出
b[0:2, ::]
[[[ 1  2  3  4]
  [ 5  6  7  8]
  [ 9 10 11 12]]
  
  [[13 14 15 16]
  [17 18 19 20]
  [21 22 23 24]]] (2, 3, 4)
当出现b[m:n, ::]这样的形式，表示对第0维度中的（m,n-1）号元素进行操作
b[0:2, ::]表示取出第一个和第二个二维数组
'''

print("b[:, 0:]")
print(b[:, 0:], b[:, 0:].shape)
print("b[:, 1:]")
print(b[:, 1:], b[:, 1:].shape)
print("b[:, -1:]")
print(b[:, -1:], b[:, -1:].shape)
print("b[:, 0:2:]")
print(b[:, 0:2:], b[:, 0:2:].shape)

'''
输出结果分析：
b[:, 0:]
[[[ 1  2  3  4]
  [ 5  6  7  8]
  [ 9 10 11 12]]
 [[13 14 15 16]
  [17 18 19 20]
  [21 22 23 24]]
 [[25 26 27 28]
  [29 30 31 32]
  [33 34 35 36]]] (3, 3, 4)
b[:, 0:]表示将每一个二维数组从第0行开始，全部输出，得到一个完整的三维数组
b[:, 1:]
[[[ 5  6  7  8]
  [ 9 10 11 12]]
 [[17 18 19 20]
  [21 22 23 24]]
 [[29 30 31 32]
  [33 34 35 36]]] (3, 2, 4)
b[:, 1:]表示将每一个二维数组从第1行开始，全部输出
b[:, -1:]
[[[ 9 10 11 12]]
 [[21 22 23 24]]
 [[33 34 35 36]]] (3, 1, 4)
b[:, -1:]表示将每一个二维数组的最后一行全部输出
b[:, 0:2:]
[[[ 1  2  3  4]
  [ 5  6  7  8]]
 [[13 14 15 16]
  [17 18 19 20]]
 [[25 26 27 28]
  [29 30 31 32]]] (3, 2, 4)
b[:, 0:2:]表示将每一个二维数组的第0行和第1行全部输出
'''

print("b[::, 0]")
print(b[::, 0], b[::, 0].shape)
print("b[::, 1]")
print(b[::, 1], b[::, 1].shape)
print("b[::, -1]")
print(b[::, -1], b[::, -1].shape)
print("b[::, 0:2:]")
print(b[::, 0:2:], b[::, 0:2].shape)

'''
输出结果分析：
b[::, 0]
[[ 1  2  3  4]
 [13 14 15 16]
 [25 26 27 28]] (3, 4)
b[::, 0]取每个二维数组的第0行
b[::, 1]
[[ 5  6  7  8]
 [17 18 19 20]
 [29 30 31 32]] (3, 4)
b[::, 1]取每个二维数组的第1行
b[::, -1]
[[ 9 10 11 12]
 [21 22 23 24]
 [33 34 35 36]] (3, 4)
b[::, -1]取每个二维数组的最后一行
b[::, 0:2:]
[[[ 1  2  3  4]
  [ 5  6  7  8]]
 [[13 14 15 16]
  [17 18 19 20]]
 [[25 26 27 28]
  [29 30 31 32]]] (3, 2, 4)
b[::, 0:2:]取每个二维数组的第0行和第1行
'''


