# _*_ coding=utf-8 _*_
# 切片还可以包括省略号...，意思就是在NumPy多维数组指定某些维度后在剩余的维度采取全选操作
# 通俗的讲，x[..., 0] = x[::, ::, 0]     x[0, ...] = x[0, ::, ::]
# 在二维数组的切片操作中，::和...的效果是一样的，因为二维数组之后也只剩一维数组了
# 但是在三维数组中，::和...的效果就大不一样了
# 对于三维数组，x[a, ,b, c]，a控制取第几个二维数组，b控制各自里面的行，c控制各自里面的列
import numpy as np

a = np.array([
    [1,2,3],
    [3,4,5],
    [4,5,6]
])  # 3行3列的二维数组

print (a[..., 1])   # 所有行的，第2列元素 [2,4,5]
print(a[::, 1])     # ::和...的含义是一样的，这里同上 [2,4,5]
print (a[1,...])   # 第2行的，所有列元素 [3,4,5]
print(a[1, ::])    # ::和...的含义是一样的，这里同上 [3,4,5]
print (a[...,1:])  # 所有行的，第二列到剩下的元素 [[2,3],[4,5],[5,6]]
print(a[::,1:])  # 也和上面一样

# 反正保证一个原则，逗号前面的是行索引，逗号后面的是列索引

# 比如再来一个三维张量，深度为2，由两个矩阵组成，每个矩阵是3行2列
print('------下面是三维张量-----------')
x = np.array([
    [[1, 11],
     [2, 22],
     [3, 33]], # 第一个内部二维数组

    [[4, 44],
     [5, 55],
     [6, 66]]   # 第二个内部二维数组
])

print(x)

print(x.shape) # 代表这个数组的shape是(2, 3, 2)，有两个二维数组，每个里面3行（3个一维数组），每个一维数组里面有两个标量，

print("-------下面是省略号三维张量切片结果---------")
print(x[..., 0])  # 在剩余维度全部选第一个，也就是 [[1 2 3],[4 5 6]]
print('---------省略号三维张量切片的本质--------------')
print(x[::, ::, 0])  # 分析，首先前面两个都是范围，最后是指定值，所以最后只降一维，输出肯定是有两个中括号
# 前面两个::，其实相当于取了原三维数组，没有变化，最后一个维度就是列，而第0列，就是第一列，所以是[[1, 2, 3],[4, 5, 6]]


'''
[[1 2 3]
 [4 5 6]]
'''

print("-------下面是两个冒号三维张量切片结果---------")
print(x[::, 0])  # 先全选两个二维矩阵，然后再选矩阵中各自第一个[ 1 11]和[ 4 44]

'''
[[ 1 11]
 [ 4 44]]
'''

print("-"*30)
print(x[..., 1])

'''
[[11 22 33]
 [44 55 66]]
'''