# Qingxiang Guo
# {2022/6/5} {17:08}
'''
这里介绍seek，tell函数的用法
seek函数的作用是，移动文件的读取指针到指定位置
tell函数，获取文件句柄的位置，返回文件对象的当前位置，最初，文件指针指向文件的开头，所以，初始值tell()是零
简单的理解，指针就是光标
【这里是重点！！！】在使用tell计算指针位置时，换行符算两个，也就是基于字节计算
使用seek移动光标的时候，换行符算两个，也就是基于字节计算
使用read读取的时候，换行符算一个，也就是基于字符计算
'''

#seek和tell的例子
file1=open('To_be_read.txt','r')
print('初始文件指针的位置是',file1.tell())
print('文件名字为',file1.name)  #文件名字为 To_be_read.txt
line=file1.readline()
print('读取的数据为:%s' % line)  #读取的数据为:111，还有个换行符
print('第一次读取数据后的文件指针位置为',file1.tell())  #输出5,111+换行符占两个字节
#这个时候文件句柄的指针已经移动到了第二行，222的开头了，文件句柄指针的移动，只要你没关闭，就是连续的
print(file1.read(2))  #输出22，因为又向后读入了两个22
print('第二次读取数据后的文件指针位置为',file1.tell())  #输出7，之前是5，现在又移动了两个，所以是7

#下面开始使用seek手动移动指针
#seek(参数1，参数2)，参数1指代移动多少个字节数，默认是0。参数2指代从哪里开始，0是从头，1是当前位置，2是末尾，默认也是0.
file1.seek(0,2)  #指针移动到末尾，偏移0位
print('第一次seek后的文件指针位置为',file1.tell())  #第一次seek后的文件指针位置为 13，2个换行符4,3个字符9，一共是13
file1.seek(1,0)  #指针从开头开始计算，偏移一个字节
print('第二次seek后的文件指针位置为',file1.tell())  #第二次seek后的文件指针位置为 1
print(file1.read(2))  #此时指针位置在第一个1后面，再读两个字节，输出另外两个11
#seek也有缺省的写法
file1.seek(2)  #缺省写法，=file1.seek(2,0)，从头，指针向后偏移2个字节，所以现在指针位置：11[指针]1
print('第三次seek后的文件指针位置为',file1.tell())  #第三次seek后的文件指针位置为 2
print(file1.read(9))  #输出如下，read函数向后读，遇到换行符的时候，是算一个字符的，一视同仁，而不是2两个算一个换行符
'''
会输出，1
222
333
'''
print('目前的文件指针位置为',file1.tell())  #输出13，因为到末尾了
file1.seek(5,0)  #从头开始移动5个字节
print(file1.read())  #会输出222,333，移动5个字节，刚好把第一行的111和换行符（两个字节）移动完
#【这里是重点！！！】在使用tell计算指针位置时，换行符算两个，也就是基于字节计算
#使用seek移动光标的时候，换行符算两个，也就是基于字节计算
#使用read读取的时候，换行符算一个，也就是基于字符计算
file1.close()



