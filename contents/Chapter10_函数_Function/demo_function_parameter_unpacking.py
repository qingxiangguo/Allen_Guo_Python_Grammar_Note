# Qingxiang Guo
# {2022/5/19} {17:15}
'''*args和 **kargs，也可以在函数调用的时候使用，称之为解包(unpacking)，
可以将列表，元组，字典传递给函数
'''

def fun(a,b,c):  #位置参数
    print('a=',a)
    print('b=', b)
    print('c=', c)

fun(10,20,30)  #这是正常例子，函数调用时的参数传递，称为位置传参
'''
a= 10
b= 20
c= 30
'''

#1. 传递列表
lst=[11,22,33]
fun(*lst)  #在函数调用时，使用一个*，将每个元素都转为位置实参传入函数

#2.传递字典
dic={'a':111,'b':222,'c':333}
fun(**dic)  #在函数调用时，使用**，将字典中的值转换为关键字实参传入
#两个星号**，由于函数里面是位置参数，而字典有键和值两个元素，这里a,b,c优先取的是值
'''a= 111
b= 222
c= 333'''

#传递字典时，如果用一个星号，a,b,c取的是键
fun(*dic)
'''
a= a
b= b
c= c
'''

#上面是位置形参传递字典，在使用可变长度参数**kwargs传递字典时，又不太一样
d = {'a' : 1,'b' : 2,'c' : 3}
def f(**kwargs):
    for k in kwargs:
        print (k)
f(**d)    #两个星号，取键，【和位置形参传字典不一样】，一个星号会报错，这里由于用的是可变长度参数**kargs，因此规则和上面的位置参数不一样，甚至相反

'''
a
b
c
'''
def f2(**kwargs):
    for k in kwargs:   #这里kwargs就是整个字典
        print ('key=',k,'value=',kwargs[k])  #如果想取键，要kwargs[k]表示

f2(**d)

"""
key= a value= 1
key= b value= 2
key= c value= 3
"""

#3.传递元组
t=(10,20,30)
fun(*t)   #在函数调用时，使用一个*，将元组的每个元素都转为位置实参传入函数

#小技巧，指定只能采用关键字参数

def fun4(a,b,*,c,d):  #中间加入星号，后面的c，d就只能关键字实参传递了
    print('a=',a)
    print('b=', b)
    print('c=', c)
    print('d=', d)

fun4(a=10,b=20,c=30,d=40)  #关键字实参传递
fun4(10,20,c=30,d=40)  #前两个位置实参，后两个关键字实参
#fun4(10,20,30,40)，由于加入了关键字参数的限定，这个全部位置传递的会报错