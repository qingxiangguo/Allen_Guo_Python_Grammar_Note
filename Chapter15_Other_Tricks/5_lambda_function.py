# Qingxiang Guo
# {2022/6/10} {17:00}
'''
匿名函数其实就是lambda表达式，是对def标准形式定义函数的简化，因为只有一行代码
lambda 只能实现简单的逻辑，如果逻辑复杂且代码量较大，则不建议使用lambda
只有当这个函数你临时想要用一下的时候，可以用lambda
'''
from functools import reduce
#比如reduce函数中用匿名函数
#传统情况下：
def f(x,y):
    return x+y

b=reduce(f,[1,2,3,4,5])

print(b)  #输出15

#当你使用lambda时，就可以简化
fl=lambda x,y:x+y  #lambda返回的是一个函数对象，你也可以不命名，冒号前面的是参数，后面是具体操作
print(fl(2,3))  #就会输出2+3=5

#也可以直接把lambda写在函数里面，不用为了reduce的使用专门再定义一个函数了
c=reduce(lambda x,y:x+y,[1,2,3,4,5])
print(c)  #输出15

#其他需要输入函数的函数，比如filter,map，也可以使用lambda
d=filter(lambda x:x>=2, [1,2,3,4,5])  #过滤大于等于2的元素
print(list(d))  #输出[2, 3, 4, 5]，因为是可迭代对象，需要list

#可以用列表表达式来翻译
#上面的例子可以写成
print([x for x in [1,2,3,4,5] if x>=2])  #输出[2, 3, 4, 5]

#另外一个输出偶数的例子
e=filter(lambda x: x % 2 ==0, [1,2,3,4,5,6]) #输出偶数
print(list(e)) #[2, 4, 6]

#可以用列表表达式来翻译
#上面的例子可以写成
print([x for x in [1,2,3,4,5,6] if x % 2 ==0])
#输出[2, 4, 6]

#下面是map的用法
g=map(lambda x:x*x, [1,2,3,4,5,6])  #将自身平方，映射到后面的序列
print(list(g))  #[1, 4, 9, 16, 25, 36]，因为是可迭代对象，需要list

#可以用列表表达式来翻译
#上面的例子可以写成
print([x*x for x in [1,2,3,4,5,6]])  #也输出[1, 4, 9, 16, 25, 36]

#使用lambda配合sort函数的key参数来对指定元素排序
#函数sorted的具体方法
a=[9,3,5,6,1,7,8,2]
print(sorted(a))  #输出[1, 2, 3, 5, 6, 7, 8, 9]

#假如a是一个由元组构成的列表，我们需要用到参数key，也就是关键词，看下面这句命令
#x表示列表中的一个元素，在这里，表示一个元组，x只是临时起的一个名字，你可以使用任意的名字；
#x[0]表示元组里的第一个元素，当然第二个元素就是x[1]；所以这句命令的意思就是按照列表中第一个元素排序
a=[('b',2),('a',3),('d',4),('c',1)]
print(sorted(a,key=lambda x:x[0]))  #就是依据元组x的第一个元组排序
#输出[1, 2, 3, 5, 6, 7, 8, 9]